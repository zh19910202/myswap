{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSwapBalanceOfToekn","asyncToGenerator","regenerator_default","a","mark","_callee6","swapData","addr","token","wrap","_context6","prev","next","Swap","networks","state","networkId","address","dappToken","methods","balanceOf","sent","window","web3","utils","fromWei","setState","swapOfTken","stop","getCurrentBalanceOf","_callee7","balanceOfEth","_context7","eth","getBalance","account","getCurrentBalanceOfToekn","_callee8","_context8","changed","_ref5","_callee9","event","type","value","_context9","target","buytoken","selltoken","transfertoken","transaccount","_x","_x2","apply","arguments","buyDai","_callee10","res","_context10","toWei","String","swap","buyToekn","send","from","status","console","log","t0","sellDai","_callee11","_context11","approve","swapAddress","on","error","transactionHash","sellToken","e","transferDai","_callee12","_context12","transfer","tokenAddress","initWeb3","loadBlockchainData","ethereum","request","method","accounts","net","getId","dappTokenData","DappToken","Contract","abi","alert","SwapData","Web3","currentProvider","chainId","_this2","_callee4","_context4","_this3","react_default","createElement","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd4972e5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport DappToken from '../abis/DappToken.json'\nimport Swap from \"../abis/Swap.json\"\nimport './App.css'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.initWeb3()\n    await this.loadBlockchainData()\n    await this.getCurrentBalanceOf()\n    await this.getCurrentBalanceOfToekn()\n    await this.getSwapBalanceOfToekn()\n  }\n\n  //获取交易所持有代币\n  getSwapBalanceOfToekn = async () => {\n    const swapData = Swap.networks[this.state.networkId]\n    const addr = swapData.address\n    let token = await this.state.dappToken.methods.balanceOf(addr).call()\n    token = window.web3.utils.fromWei(token, 'ether')\n    this.setState({ swapOfTken: token })\n  }\n\n  //获取当前账户eth\n  getCurrentBalanceOf = async () => {\n    let balanceOfEth = await window.web3.eth.getBalance(this.state.account) \n    balanceOfEth = window.web3.utils.fromWei(balanceOfEth, 'ether');\n    this.setState({ balanceOfEth })\n    \n  }\n\n  //获取当前账户代币\n  getCurrentBalanceOfToekn = async () => {\n    let token = await this.state.dappToken.methods.balanceOf(this.state.account).call()\n    //console.log(token)\n    token = window.web3.utils.fromWei(token, 'ether')\n    await this.setState({ token: token })\n  }\n\n  //加载区块链的数据\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n    this.setState({ networkId })\n    //console.log(accounts[0],networkId)\n\n    // Load DappToken\n    const dappTokenData = DappToken.networks[networkId]\n    if (dappTokenData) {\n      const dappToken = new web3.eth.Contract(DappToken.abi, dappTokenData.address)\n      this.setState({ dappToken })\n      this.setState({ tokenAddress: dappTokenData.address })\n    } else {\n      window.alert('DappToken contract not deployed to detected network.')\n    }\n\n\n    //load swap\n    const SwapData = Swap.networks[networkId]\n    if (SwapData) {\n      const swap = new web3.eth.Contract(Swap.abi, SwapData.address)\n      this.setState({ swap })\n      this.setState({ swapAddress: SwapData.address })\n    } else {\n      window.alert('DappToken contract not deployed to detected network.')\n    }\n\n  }\n\n  //初始化web3\n  async initWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n\n  }\n\n\n  async componentDidMount(){\n    window.ethereum.on('chainChanged', (chainId) => {\n    console.log(\"chainId:\",chainId)\n\n    this.loadBlockchainData()\n    });\n     window.ethereum.on('accountsChanged', async()=>{\n      \n      await this.loadBlockchainData()\n      await this.getCurrentBalanceOfToekn()\n    });\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      dappToken: {},\n      networkId: null,\n      account: null,\n      swap: {},\n      balanceOfEth: 0,\n      swapOfTken: 0,\n      token: 0,\n      buytoken: \"\",\n      selltoken: \"\",\n      swapAddress: null,\n      tokenAddress: null,\n      transfertoken:'',\n      transaccount:'',\n  \n    }\n  }\n  changed = async (event,type) => {\n    let value = event.target.value\n    if (type === 'buy'){\n      this.setState({ buytoken: value })\n    }else if(type === 'sell'){\n      this.setState({ selltoken: value })\n    }else if(type ==='transfertoken'){\n      this.setState({ transfertoken: value })\n    }else if (type==='transaccount'){\n      this.setState({ transaccount: value })\n    }\n  }\n  // 购买token\n  buyDai = async () => {\n    let value = this.state.buytoken / 100\n    value = window.web3.utils.toWei(String(value),'ether')\n    try{\n        const res = await this.state.swap.methods.buyToekn().send({ from: this.state.account, value: value })\n      if (res.status === true) {\n        console.log(res)\n        this.setState({buytoken:\"\"})\n        this.getCurrentBalanceOfToekn()\n      }  \n    }catch(e){\n      console.log(e)\n    }\n    \n    \n  }\n  //卖掉token\n  sellDai = async () => {\n    //授权\n    let value = this.state.selltoken \n    value = window.web3.utils.toWei(value,'ether')\n    try{\n      \n      this.state.dappToken.methods.approve(this.state.swapAddress, value).send({ from: this.state.account })\n      .on('error', console.error)\n      .on('transactionHash',(transactionHash)=>{\n        console.log('transactionHash:',transactionHash) \n        this.state.swap.methods.sellToken(value).send({ from: this.state.account })\n        .on('error', console.error)\n        .on('transactionHash',(transactionHash)=>{console.log('transactionHash:',transactionHash)})\n      })\n      \n    }catch(e){\n      console.log(e)\n    }\n       \n  }\n  \n  //转账token\n  transferDai = async () => {\n    //console.log(this.state.transaccount,this.state.transfertoken)\n    let value = this.state.transfertoken\n    value = window.web3.utils.toWei(value,'ether')\n    const res = await this.state.dappToken.methods.transfer(this.state.transaccount,value).send({ from: this.state.account})\n    if (res.status === true) {\n      console.log(res)\n      this.getCurrentBalanceOfToekn()\n    }\n}\n\n  render() {\n\n    return (\n      <div>\n        <div> 当前账户：{this.state.account} </div>\n        <div> 当前账户余额：{this.state.balanceOfEth} ETH </div>\n        <div> 当前账户token：{this.state.token} Dai</div>\n        <div> swap合约token:{this.state.swapOfTken} Dai</div>\n        <div> 当前swap合约地址: {this.state.swapAddress}</div>\n        <div> 当前token合约地址: {this.state.tokenAddress}</div>\n        买Dai：<input type=\"text\"  value= {this.state.buytoken} onChange={event => this.changed(event,'buy')} ></input><button onClick={() => { this.buyDai() }}>确定</button><br></br>\n        卖Dai：<input type=\"text\"  value= {this.state.selltoken} onChange={event => this.changed(event,'sell')}></input><button onClick={() => { this.sellDai() }}>确定</button><br></br>\n        账户：  <input type=\"text\"  value= {this.state.transaccount} onChange={event => this.changed(event,'transaccount')}></input>  金额：<input type=\"text\"  value= {this.state.transfertoken} onChange={event => this.changed(event,'transfertoken')}></input><button onClick={()=>{this.transferDai()}}>token转账</button>\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}